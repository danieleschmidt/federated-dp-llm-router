networks:
  federated-network:
    driver: bridge
services:
  federated-dp-llm-api:
    build:
      args:
        PYTHON_VERSION: 3.11-slim
      context: .
      dockerfile: Dockerfile.prod
    container_name: federated-dp-llm-api
    depends_on:
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_started
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    environment:
    - ENVIRONMENT=production
    - LOG_LEVEL=INFO
    - ENABLE_AUDIT_LOGGING=true
    - ENABLE_PRIVACY_MONITORING=true
    - HIPAA_COMPLIANCE_MODE=true
    - QUANTUM_OPTIMIZATION=true
    - REDIS_URL=redis://redis:6379
    - POSTGRES_URL=postgresql://federated_user:${POSTGRES_PASSWORD}@postgres:5432/federated_dp_llm
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8080/health
      timeout: 10s
    image: federated-dp-llm:production-v1.0.0
    networks:
    - federated-network
    ports:
    - 8080:8080
    restart: unless-stopped
    volumes:
    - ./configs/production.yaml:/app/config/production.yaml:ro
    - model_cache:/app/models
    - audit_logs:/app/logs
  grafana:
    container_name: federated-grafana
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    - GF_USERS_ALLOW_SIGN_UP=false
    image: grafana/grafana:latest
    networks:
    - federated-network
    ports:
    - 3000:3000
    restart: unless-stopped
    volumes:
    - grafana_data:/var/lib/grafana
    - ./deployment/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
  postgres:
    container_name: federated-postgres
    environment:
    - POSTGRES_DB=federated_dp_llm
    - POSTGRES_USER=federated_user
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      interval: 30s
      retries: 5
      test:
      - CMD-SHELL
      - pg_isready -U federated_user -d federated_dp_llm
      timeout: 10s
    image: postgres:15-alpine
    networks:
    - federated-network
    restart: unless-stopped
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ./deployment/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
  prometheus:
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    - --web.console.libraries=/etc/prometheus/console_libraries
    - --web.console.templates=/etc/prometheus/consoles
    - --storage.tsdb.retention.time=15d
    - --web.enable-lifecycle
    container_name: federated-prometheus
    image: prom/prometheus:latest
    networks:
    - federated-network
    ports:
    - 9090:9090
    restart: unless-stopped
    volumes:
    - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    - prometheus_data:/prometheus
  redis:
    command:
    - redis-server
    - --appendonly
    - 'yes'
    - --requirepass
    - ${REDIS_PASSWORD}
    container_name: federated-redis
    healthcheck:
      interval: 30s
      retries: 5
      test:
      - CMD
      - redis-cli
      - --raw
      - incr
      - ping
      timeout: 3s
    image: redis:7-alpine
    networks:
    - federated-network
    ports:
    - 6379:6379
    restart: unless-stopped
    volumes:
    - redis_data:/data
version: '3.8'
volumes:
  audit_logs: {}
  grafana_data: {}
  model_cache: {}
  postgres_data: {}
  prometheus_data: {}
  redis_data: {}
