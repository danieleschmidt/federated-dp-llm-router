env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: ghcr.io
jobs:
  build-and-push:
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    needs:
    - quality-gates
    - security-scan
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
    - id: meta
      name: Extract metadata
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        build-args: '|\n              BUILD_DATE=${{ github.event.head_commit.timestamp
          }}\n              VERSION=${{ github.ref_name }}\n              VCS_REF=${{
          github.sha }}'
        context: .
        file: ./Dockerfile.prod
        labels: ${{ steps.meta.outputs.labels }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
  deploy-production:
    environment: production
    if: github.event_name == 'release'
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to production
      run: echo 'Deploying to production environment...'
  deploy-staging:
    environment: staging
    if: github.ref == 'refs/heads/main'
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to staging
      run: echo 'Deploying to staging environment...'
  quality-gates:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: pip install -r requirements.txt pytest pytest-cov
    - name: Run quality gates
      run: python autonomous_quality_gates.py
    - if: always()
      name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: quality-gate-results
        path: test-results/
  security-scan:
    needs: quality-gates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_DOCKERFILE: 'true'
        VALIDATE_PYTHON_BANDIT: 'true'
        VALIDATE_PYTHON_BLACK: 'true'
      name: Run security scan
      uses: github/super-linter@v5
name: Federated DP-LLM CI/CD Pipeline
'on':
  pull_request:
    branches:
    - main
  push:
    branches:
    - main
    - develop
  release:
    types:
    - published
