apiVersion: apps/v1
kind: Deployment
metadata:
  name: federated-router
  namespace: federated-dp-llm
  labels:
    app: federated-router
    component: router
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: federated-router
  template:
    metadata:
      labels:
        app: federated-router
        component: router
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: federated-router-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      
      # Init container for database migrations
      initContainers:
      - name: migrate
        image: federated-dp-llm:latest
        command: ["python", "-m", "federated_dp_llm.cli", "migrate"]
        envFrom:
        - configMapRef:
            name: federated-router-config
        - secretRef:
            name: federated-router-secrets
        volumeMounts:
        - name: config
          mountPath: /app/configs
        - name: certs
          mountPath: /app/certs
          readOnly: true
      
      containers:
      - name: federated-router
        image: federated-dp-llm:latest
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 8090
          protocol: TCP
        
        env:
        - name: PYTHONPATH
          value: "/app"
        - name: LOG_LEVEL
          value: "INFO"
        - name: FEDERATED_CONFIG_FILE
          value: "/app/configs/production.yaml"
        
        envFrom:
        - configMapRef:
            name: federated-router-config
        - secretRef:
            name: federated-router-secrets
        
        volumeMounts:
        - name: config
          mountPath: /app/configs
        - name: logs
          mountPath: /app/logs
        - name: models
          mountPath: /app/models
        - name: certs
          mountPath: /app/certs
          readOnly: true
        - name: tmp
          mountPath: /tmp
        
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        
        livenessProbe:
          httpGet:
            path: /health/live
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      # Sidecar container for log shipping
      - name: log-shipper
        image: fluent/fluent-bit:latest
        volumeMounts:
        - name: logs
          mountPath: /app/logs
          readOnly: true
        - name: fluent-bit-config
          mountPath: /fluent-bit/etc
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      volumes:
      - name: config
        configMap:
          name: federated-router-config-files
      - name: logs
        emptyDir: {}
      - name: models
        persistentVolumeClaim:
          claimName: federated-models-pvc
      - name: certs
        secret:
          secretName: federated-router-tls
      - name: tmp
        emptyDir: {}
      - name: fluent-bit-config
        configMap:
          name: fluent-bit-config
      
      # Pod disruption budget
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - federated-router
              topologyKey: kubernetes.io/hostname
      
      terminationGracePeriodSeconds: 60
      
      # DNS configuration for service discovery
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: "2"

---
apiVersion: v1
kind: Service
metadata:
  name: federated-router-service
  namespace: federated-dp-llm
  labels:
    app: federated-router
    component: router
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-west-2:123456789012:certificate/12345678-1234-1234-1234-123456789012
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  selector:
    app: federated-router
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 8090
    targetPort: metrics
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 3600

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: federated-router-sa
  namespace: federated-dp-llm
  labels:
    app: federated-router
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/FederatedRouterRole

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: federated-router-pdb
  namespace: federated-dp-llm
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: federated-router

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: federated-router-network-policy
  namespace: federated-dp-llm
spec:
  podSelector:
    matchLabels:
      app: federated-router
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 8080
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 8090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - podSelector:
        matchLabels:
          app: hospital-node
    ports:
    - protocol: TCP
      port: 8443
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53