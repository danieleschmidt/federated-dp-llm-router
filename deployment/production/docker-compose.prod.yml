# Production Docker Compose Configuration
# Federated DP-LLM Router - Production Deployment
# 
# This configuration deploys a production-ready federated differential privacy
# LLM router with comprehensive security, monitoring, and high availability.

version: '3.8'

services:
  # Main Federated Router API
  federated-router:
    image: federated-dp-llm:latest
    container_name: federated-router-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - PRIVACY_BUDGET_DEFAULT=10.0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://federated:${DB_PASSWORD}@postgres:5432/federated_dp
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - QUANTUM_OPTIMIZATION=true
      - ENABLE_MONITORING=true
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - postgres
      - prometheus
    volumes:
      - ./configs/production.yaml:/app/config/production.yaml:ro
      - ./ssl:/app/ssl:ro
      - federated-logs:/app/logs
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Hospital Node 1 (Cardiology)
  hospital-node-cardiology:
    image: federated-dp-llm:latest
    container_name: hospital-cardiology-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - NODE_TYPE=hospital
      - DEPARTMENT=cardiology
      - MODEL_SHARD=cardiology_shard
      - COORDINATOR_URL=https://federated-router:8080
      - NODE_ID=hospital_cardiology_001
      - PRIVACY_BUDGET_LIMIT=15.0
      - DATA_ENCRYPTION=AES256
    ports:
      - "8443:8443"
    depends_on:
      - federated-router
    volumes:
      - ./models/cardiology:/app/models:ro
      - ./ssl:/app/ssl:ro
      - hospital-cardiology-logs:/app/logs
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Hospital Node 2 (Neurology)
  hospital-node-neurology:
    image: federated-dp-llm:latest
    container_name: hospital-neurology-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - NODE_TYPE=hospital
      - DEPARTMENT=neurology
      - MODEL_SHARD=neurology_shard
      - COORDINATOR_URL=https://federated-router:8080
      - NODE_ID=hospital_neurology_001
      - PRIVACY_BUDGET_LIMIT=12.0
      - DATA_ENCRYPTION=AES256
    ports:
      - "8444:8443"
    depends_on:
      - federated-router
    volumes:
      - ./models/neurology:/app/models:ro
      - ./ssl:/app/ssl:ro
      - hospital-neurology-logs:/app/logs
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G

  # Hospital Node 3 (Emergency)
  hospital-node-emergency:
    image: federated-dp-llm:latest
    container_name: hospital-emergency-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - NODE_TYPE=hospital
      - DEPARTMENT=emergency
      - MODEL_SHARD=emergency_shard
      - COORDINATOR_URL=https://federated-router:8080
      - NODE_ID=hospital_emergency_001
      - PRIVACY_BUDGET_LIMIT=20.0  # Higher for emergency
      - DATA_ENCRYPTION=AES256
      - PRIORITY_LEVEL=critical
    ports:
      - "8445:8443"
    depends_on:
      - federated-router
    volumes:
      - ./models/emergency:/app/models:ro
      - ./ssl:/app/ssl:ro
      - hospital-emergency-logs:/app/logs
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '6.0'
          memory: 12G
        reservations:
          cpus: '3.0'
          memory: 6G

  # Redis for Caching and Session Management
  redis:
    image: redis:7-alpine
    container_name: redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./configs/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # PostgreSQL for Audit Logs and Privacy Accounting
  postgres:
    image: postgres:15-alpine
    container_name: postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=federated_dp
      - POSTGRES_USER=federated
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init:/docker-entrypoint-initdb.d:ro
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U federated -d federated_dp"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Load Balancer (NGINX)
  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - federated-router
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Log Aggregation (Fluent Bit)
  fluent-bit:
    image: fluent/fluent-bit:latest
    container_name: fluent-bit-prod
    restart: unless-stopped
    volumes:
      - ./logging/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf:ro
      - federated-logs:/app/logs:ro
      - hospital-cardiology-logs:/hospital-cardiology/logs:ro
      - hospital-neurology-logs:/hospital-neurology/logs:ro
      - hospital-emergency-logs:/hospital-emergency/logs:ro
      - /var/log:/var/log:ro
    networks:
      - federated-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Security Scanner (Trivy)
  security-scanner:
    image: aquasec/trivy:latest
    container_name: security-scanner-prod
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - trivy-cache:/root/.cache/trivy
    networks:
      - federated-network
    command: ["image", "--exit-code", "1", "federated-dp-llm:latest"]
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

volumes:
  postgres-data:
    driver: local
    driver_opts:
      type: none
      device: /data/postgres
      o: bind
  redis-data:
    driver: local
    driver_opts:
      type: none
      device: /data/redis
      o: bind
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      device: /data/prometheus
      o: bind
  grafana-data:
    driver: local
    driver_opts:
      type: none
      device: /data/grafana
      o: bind
  federated-logs:
    driver: local
  hospital-cardiology-logs:
    driver: local
  hospital-neurology-logs:
    driver: local
  hospital-emergency-logs:
    driver: local
  trivy-cache:
    driver: local

networks:
  federated-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: federated-br0
      com.docker.network.enable_icc: "true"
      com.docker.network.enable_ip_masquerade: "true"